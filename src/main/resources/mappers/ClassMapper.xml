<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wolclass.mappers.ClassMapper">
	
	<!-- 클래스 등록 -->
	<insert id="addClass">
		insert into wc_class (c_name, m_id, c_maxperson, c_addr1, c_addr2, c_addrdetails, c_lati, 
		c_longi, c_level, c_time, c_category, c_content, c_img, c_price, c_confirm, c_regdate)
		values(#{c_name}, #{m_id}, #{c_maxperson}, #{c_addr1}, #{c_addr2}, #{c_addrdetails}, #{c_lati}, #{c_longi}, 
		#{c_level}, #{c_time}, #{c_category}, #{c_content}, #{c_img}, #{c_price}, default, default)                         
	</insert>	
	<!-- 클래스 등록 -->	
	
	<!-- 등록 완료 클래스 리스트 -->
	<select id="registerClassList" resultType="ClassVO">
		select *
		from wc_class
		where m_id=#{m_id}
	</select>
	<!-- 등록 완료 클래스 리스트 -->

	<!-- 해당 키워드 리스트 출력 -->
	<select id="findByKeyword" resultType="ClassVO">
		select c.c_no, c.c_name, c.c_addr1, c.c_addr2, c.c_lati, c.c_longi, c.c_level, c.c_category, c.c_img, c.c_price, round(ifnull(r.score,0.0),1) score
		from wc_class c left join  (select c_no, avg(r_score) score, count(*) cnt from wc_reply group by c_no) r
        on c.c_no = r.c_no
		WHERE c_name REGEXP #{keyword} AND c_confirm = 'Y'
		ORDER BY c_regdate desc;
	</select>
	<!-- 해당 키워드 리스트 출력 -->
	
	<!-- 카테고리별 리스트 출력 -->	
	<select id="getCategoryClassList" resultType="ClassVO">
		SELECT c.c_no, c.c_name, c.c_addr1, c.c_addr2, c.c_lati, c.c_longi, c.c_level, c.c_category, c.c_img, c.c_price, round(ifnull(r.score,0.0),1) score
		from wc_class c left join  (select c_no, avg(r_score) score, count(*) cnt from wc_reply group by c_no) r
        on c.c_no = r.c_no
		WHERE c_category IN (
		    SELECT DISTINCT c_category
		    FROM wc_class
		) AND c_confirm = 'Y'
		ORDER BY c_regdate desc
	</select>
	<!-- 카테고리별 리스트 출력 -->	
	
	<!-- 온라인 클래스 출력(주소 null) -->
	<select id="onlineClassList" resultType="ClassVO">
		select c.c_no, c.c_name, c.c_addr1, c.c_addr2, c.c_lati, c.c_longi, c.c_level, c.c_category, c.c_img, c.c_price, round(ifnull(r.score,0.0),1) score
		from wc_class c left join  (select c_no, avg(r_score) score, count(*) cnt from wc_reply group by c_no) r
		on c.c_no = r.c_no
		where c_addr1 = '' and c_confirm = 'Y'
		order by c_regdate desc
	</select>
	<!-- 온라인 클래스 출력(주소 null) -->

	<!-- 클래스 조회 TH -->
	<select id="selectClass" resultType="ClassVO">
	select * from wc_class where c_no=#{c_no}
	</select>
	
	<!-- 페이징 처리를 위한 전채 글 갯수 HJ -->
	<select id="classListCnt" parameterType="map" resultType="int">
	<![CDATA[  
		select count(c_no)
		from wc_class c
		where c_confirm = 'Y'
		and c.c_no in (select c_no from wc_timetable where t_start >= #{timestart} and t_end <= #{timeend} group by c_no having sum(t_rem_p) > 0)
		and c_name like concat('%',#{search},'%')
		and c_category like concat('%',#{category},'%')
		and c_addr1 like concat('%',#{addr},'%')
	]]>
	<if test="lowlv != 0 || midlv != 0 || highlv != 0">
		and c.c_level in (#{lowlv},#{midlv},#{highlv})
	</if> 
	</select>
	<!-- 페이징 처리를 위한 전채 글 갯수 HJ -->
	
	<!-- 클래스 검색 조회 및 페이징 HJ -->
	<!-- 최신0 인기1 거리2 낮은3 높은4 -->
	<select id="classList" resultType="ClassVO">
	<![CDATA[  
		select c.c_no, c.c_name, c.c_addr1, c.c_addr2, c.c_lati, c.c_longi, c.c_level, c.c_category, c.c_img, c.c_price, round(ifnull(r.score,0.0),1) score,
		getDistance(#{userLat,javaType=DOUBLE},#{userLng,javaType=DOUBLE},c.c_lati,c.c_longi) distance
		from wc_class c left join (select c_no, avg(r_score) score, count(*) cnt from wc_reply group by c_no) r
		on c.c_no = r.c_no
		where c_confirm = 'Y'
		and c.c_no in (select c_no from wc_timetable where t_start >= #{timestart} and t_end <= #{timeend} group by c_no having sum(t_rem_p) > 0)
		and c.c_name like concat('%',#{search},'%')
		and c.c_category like concat('%',#{category},'%')
		and c.c_addr1 like concat('%',#{addr},'%')
	]]>
	<if test="lowlv != 0 || midlv != 0 || highlv != 0">
	and c.c_level in (#{lowlv},#{midlv},#{highlv})
	</if>
	order by
	<choose>
		<when test="order == 1">
		r.cnt*r.score desc, c.c_regdate desc
		</when>
		<when test="order == 2">
		distance, c.c_regdate desc
		</when>
		<when test="order == 3">
		c.c_price, c.c_regdate desc
		</when>
		<when test="order == 4">
		c.c_price desc, c.c_regdate desc
		</when>
		<otherwise>
		c.c_regdate desc
		</otherwise>
	</choose>
	<![CDATA[
		limit #{pageSize,javaType=INTEGER}
		offset #{startRow,javaType=INTEGER}
	]]> 
	</select>
	<!-- 최신0 인기1 거리2 낮은3 높은4 -->
	<!-- 클래스 검색 조회 및 페이징 HJ -->
	
	<!-- 주변검색 기능 HJ -->
	<select id="nearbyClassList" resultType="ClassVO">
	<![CDATA[  
		select c.c_no, c.c_name, c.c_addr1, c.c_addr2, c.c_lati, c.c_longi, c.c_level, c.c_category, c.c_img, c.c_price, round(ifnull(r.score,0.0),1) score,
		getDistance(#{userLat,javaType=DOUBLE},#{userLng,javaType=DOUBLE},c.c_lati,c.c_longi) distance
		from wc_class c left join (select c_no, avg(r_score) score, count(*) cnt from wc_reply group by c_no) r
		on c.c_no = r.c_no
		where c_confirm = 'Y'
		and c.c_lati is not null
		and c.c_lati != ''
		having distance <= 30
	]]>
		<if test="userAddr != null and userAddr != ''">
		or c.c_addr1 like concat('%',#{userAddr},'%')
		</if>
	<![CDATA[  
		order by distance
		limit 30
	]]> 
	</select>
	<!-- 주변검색 기능 HJ -->
	
	<update id="updateMember">
	
	</update>
	
	<delete id="deleteMember">
	
	</delete>
	
</mapper>	